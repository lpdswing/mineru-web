# 工作流名称
name: Build and Push Docker Images

# 工作流触发器
on:
  # 1. 当有新版本发布时自动触发
  release:
    types: [published]
  # 2. 允许在 GitHub Actions 页面手动触发
  workflow_dispatch:
    inputs:
      build_backend:
        description: 'Build backend image'
        required: true
        type: boolean
        default: true
      build_frontend:
        description: 'Build frontend image'
        required: true
        type: boolean
        default: true
      build_amd64:
        description: 'Build AMD64 (x86) platform images'
        required: true
        type: boolean
        default: true
      build_arm64:
        description: 'Build ARM64 platform images'
        required: true
        type: boolean
        default: false
      version:
        description: 'Version tag for the images'
        required: true
        type: string
        default: 'latest'

# 环境变量
env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  BACKEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/mineru-web-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKER_USERNAME }}/mineru-web-frontend
  # 动态设置版本：如果是release触发，使用release的标签名；否则使用手动输入的版本
  VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || inputs.version }}

# 工作任务
jobs: 
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # release时只构建amd64，手动触发时根据输入决定。
      - name: Set build platforms
        id: set-platforms
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
          else
            PLATFORMS=""
            if [ "${{ inputs.build_amd64 }}" = "true" ]; then
              PLATFORMS="linux/amd64"
            fi
            if [ "${{ inputs.build_arm64 }}" = "true" ]; then
              if [ -n "$PLATFORMS" ]; then
                PLATFORMS="$PLATFORMS,linux/arm64"
              else
                PLATFORMS="linux/arm64"
              fi
            fi
            if [ -z "$PLATFORMS" ]; then
              echo "错误：必须至少选择一个构建平台。"
              exit 1
            fi
            echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          fi

      - name: Generate backend image metadata
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: type=raw,value=${{ env.VERSION }}

      - name: Generate frontend image metadata
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: type=raw,value=${{ env.VERSION }}

      - name: Free up disk space
        run: |
          echo "Before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc "$AGENT_TOOLSDIRECTORY"
          echo "After cleanup:"
          df -h

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3 # 使用 v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # 使用 v3

      - name: Login to DockerHub
        uses: docker/login-action@v3 # 使用 v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push backend image
        if: ${{ github.event_name == 'release' || inputs.build_backend }}
        uses: docker/build-push-action@v5 # 使用 v5
        with:
          context: ./backend
          platforms: ${{ steps.set-platforms.outputs.platforms }}
          push: true
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false # 保持与您原来设置一致

      - name: Build and push frontend image
        if: ${{ github.event_name == 'release' || inputs.build_frontend }}
        uses: docker/build-push-action@v5 # 使用 v5
        with:
          context: ./frontend
          platforms: ${{ steps.set-platforms.outputs.platforms }}
          push: true
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false # 保持与您原来设置一致